}
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(v, as.factor(m)), cv.rmse)
colnames(cv.dat) = c("shape_parameter", "number_of_neighborhoods", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "shape_parameter", y = "number_of_neighborhoods", fill= "RMSE")) +
geom_tile() + xlab("shape parameter") + ylab("number of neighborhoods") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
source("2a.RData")
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(v, as.factor(m)), cv.rmse)
colnames(cv.dat) = c("shape_parameter", "number_of_neighborhoods", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "shape_parameter", y = "number_of_neighborhoods", fill= "RMSE")) +
geom_tile() + xlab("shape parameter") + ylab("number of neighborhoods") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
tune.m
x = get.x(train)
(10000, 01000, 11000, 01010, 11110, 11111)
codes = c(10000, 01000, 11000, 01010, 11110, 11111)
cv.res = array(NA, dim = c(length(v), length(m), nfolds))
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train)
dat[-fold]
fold
x = get.x(train, codes[i])
fold
rownames(val)
x = get.x(train, codes[i])
fold = folds[[k]]
train = dat[-fold]
val = dat[fold]
x = get.x(train, codes[i])
fold = folds[[k]]
train = dat[-fold]
val = dat[fold]
fold
train = dat[-fold]
val = dat[fold]
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[i], sep = ""),
m_seq=m[1:j], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(test, codes[i])
test$x
x = get.x(newloc, codes[i])
pred.z = predictions(fit, locs_pred=newloc, X_pred=rep(1,nrow(val)))
newloc = as.data.frame(cbind(val$x, val$y))
x = get.x(newloc, codes[i])
pred.z = predictions(fit, locs_pred=newloc, X_pred=rep(1,nrow(val)))
newloc = cbind(val$x, val$y)
x = get.x(newloc, codes[i])
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
x
i=5
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
x
newloc$x
codes[i]
x = get.x(newloc, codes[i])
x
codes[i]
x = get.x(newloc, codes[3])
x
x = get.x(newloc, codes[4])
x
x = get.x(newloc, codes[5])
x
x = get.x(newloc, codes[6])
x
get.x = function(dat, code){
x = NULL
if(code == 10000){
x = cbind(rep(1, nrow(dat)), dat$x)
}else if(code == 01000){
x = cbind(rep(1, nrow(dat)), dat$y)
}else if(code == 11000){
x = cbind(rep(1, nrow(dat)), dat$x, dat$x^2)
}else if(code == 11100){
x = cbind(rep(1, nrow(dat)), dat$x, dat$y, dat$x^2)
}else if(code == 01010){
x = cbind(rep(1, nrow(dat)), dat$y, dat$y^2)
}else if(code == 10110){
x = cbind(rep(1, nrow(dat)), dat$x, dat$y, dat$y^2)
}else if(code == 11110){
x = cbind(rep(1, nrow(dat)), dat$x, dat$y, dat$x^2, dat$y^2)
}else if(code == 11111){
x = cbind(rep(1, nrow(dat)), dat$x, dat$y, dat$x^2, dat$y^2, dat$x*dat$y)
}
return(x)
}
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
x = get.x(newloc, codes[6])
x
x = get.x(newloc, codes[7])
x
x = get.x(newloc, codes[8])
x
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(v), length(m), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(m)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[i], sep = ""),
m_seq=m[1:j], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[8])
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[i], sep = ""),
m_seq=m[1:j], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[8])
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
x
newloc
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
x = get.x(train, codes[i])
x
x
get.x(newloc, codes[8])
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(v), length(m), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(m)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[i], sep = ""),
m_seq=m[1:j], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[i], sep = ""),
m_seq=m[1:j], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
get.x(newloc, codes[i])
get.x(train, codes[i])
cbind(train$x, train$y)
colnames(newloc) = ""
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
newloc
pred.z = predictions(fit, locs_pred=as.matrix(newloc), X_pred=x)
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(v), length(m), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(m)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[i], sep = ""),
m_seq=m[1:j], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
colnames(newloc) = ""
pred.z = predictions(fit, locs_pred=as.matrix(newloc), X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
tune.m
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(codes), length(v), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(v)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[j], sep = ""),
m_seq=m[1:tune.m], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
colnames(newloc) = ""
pred.z = predictions(fit, locs_pred=as.matrix(newloc), X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
length(codes)
length(v)
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(codes), length(v), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(v)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[j], sep = ""),
m_seq=m[1:tune.m], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
colnames(newloc) = ""
pred.z = predictions(fit, locs_pred=as.matrix(newloc), X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(codes), length(v), nfolds))
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[j], sep = ""),
m_seq=m[1:tune.m], silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[j], sep = ""),
m_seq=m[1:tune.m], silent = TRUE, X =x)
paste("matern", v[j], sep = "")
x
tune.m
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(codes), length(v), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(v)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[j], sep = ""),
m_seq=seq(10, tune.m, 10), silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
colnames(newloc) = ""
pred.z = predictions(fit, locs_pred=as.matrix(newloc), X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
dump("cv.res", "3a.RData")
source("3a.RData")
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(v, as.factor(m)), cv.rmse)
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "model_matrix", y = "shape_parameter", fill= "RMSE")) +
geom_tile() + xlab("model matrix") + ylab("shape parameter") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "model_matrix", y = "shape_parameter", fill= "RMSE")) +
geom_tile() + xlab("model matrix") + ylab("shape parameter") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
cv.dat = apply(cv.res, c(1,2), median)
idx = arrayInd(which.min(cv.dat), dim(cv.dat))
tune.code = codes[idx[1]]
tune.v = v[idx[2]]
tune.code
tune.v
min(cv.dat)
cv.dat[4,]
cv.dat[,4]
cv.dat[,1]
# x = cbind(rep(1, nrow(dat)), dat$x, dat$y, dat$x^2, dat$y^2)
# x = cbind(rep(1, nrow(dat)), dat$x^2, dat$y^2)
x = cbind(rep(1, nrow(dat)), dat$x, dat$y)
fit = fit_model(dat$z, cbind(dat$x, dat$y), covfun_name=paste("matern", tune.v, sep = ""),
m_seq=seq(10, tune.m, 10), X = x, silent = TRUE)
fit$covparms
fit$betahat
pred.z = predictions(fit, locs_pred=cbind(dat$x, dat$y), X_pred=rep(1,nrow(dat)))
train.rmse = sqrt(mean(pred.z-dat$z)^2)
pred.z = predictions(fit, locs_pred=cbind(dat$x, dat$y), X_pred=x)
train.rmse = sqrt(mean(pred.z-dat$z)^2)
newloc =as.matrix(expand.grid(x=seq(0,1,length=100), x=seq(0,1,length=100)))
colnames(newloc) = c("x","y")
# x = cbind(rep(1, nrow(newloc)), newloc[,1], newloc[,2], newloc[,1]^2, newloc[,2]^2)
x = cbind(rep(1, nrow(newloc)), newloc[,1], newloc[,2])
pred.z = predictions(fit, locs_pred=newloc, X_pred=x)
quilt.plot(newloc, pred.z, xlim=c(0,1), ylim=c(0,1), cex.lab=1.5, cex.axis=1.5, nx=100, ny=100, pty="s")
points(dat[,2],dat[,3], pch="+", col=1, cex=0.5)
test1 = read.csv("test1.csv")
test2 = read.csv("test2.csv")
# x = cbind(rep(1, nrow(test1)), test1$x, test1$y, test1$x^2, test1$y^2)
# x = cbind(rep(1, nrow(test1)), test1$x^2, test1$y^2)
x = cbind(rep(1, nrow(test1)), test1$x, test1$y)
z1 = predictions(fit, locs_pred=cbind(test1$x, test1$y), X_pred=x)
x = cbind(rep(1, nrow(test2)), test1$x, test1$y, test2$x^2, test2$y^2)
# x = cbind(rep(1, nrow(test2)), test2$x^2, test2$y^2)
x = cbind(rep(1, nrow(test2)), test2$x, test2$y)
z2 = predictions(fit, locs_pred=cbind(test2$x, test2$y), X_pred=x)
test.res = data.frame(test_id = test1$test_id, z1 = z1, z2 = z2)
write.csv(test.res, "111024513_20230526.csv")
cv.dat
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
cv.dat
as.factor(codes)
codes = c(10000, 01000, 11000, 11100, 01010, 10110, 11110, 11111)
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "model_matrix", y = "shape_parameter", fill= "RMSE")) +
geom_tile() + xlab("model matrix") + ylab("shape parameter") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
as.factor(codes)
codes
codes = c("10000", "01000", "11000", "11100", "01010", "10110", "11110", "11111")
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(v, as.factor(m)), cv.rmse)
codes = c("10000", "01000", "11000", "11100", "01010", "10110", "11110", "11111")
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "model_matrix", y = "shape_parameter", fill= "RMSE")) +
geom_tile() + xlab("model matrix") + ylab("shape parameter") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
codes = c(10000, 01000, 11000, 01010, 11100, 10110, 11110, 11111)
cv.res = array(NA, dim = c(length(codes), length(v), nfolds))
for(i in  1:length(codes)){
for(j in 1:length(v)){
for(k in 1:length(folds)){
fold = folds[[k]]
train = dat[-fold,]
val = dat[fold,]
x = get.x(train, codes[i])
fit = fit_model(train$z, cbind(train$x, train$y), covfun_name=paste("matern", v[j], sep = ""),
m_seq=seq(10, tune.m, 10), silent = TRUE, X =x)
newloc = as.data.frame(cbind(val$x, val$y))
colnames(newloc) = c("x","y")
x = get.x(newloc, codes[i])
colnames(newloc) = ""
pred.z = predictions(fit, locs_pred=as.matrix(newloc), X_pred=x)
rmse = sqrt(mean((pred.z-val$z)^2))
cv.res[i,j,k] = rmse
}
print(c(i, j))
}
}
dump("cv.res", "3a.RData")
install.packages("ParBayesianOptimization")
knitr::opts_chunk$set(echo = TRUE, fig.height = 4)
library(ParBayesianOptimization)
?bayesOpt
?getBestPars
scoringFunction <- function(x) {
a <- exp(-(2-x)^2)*1.5
b <- exp(-(4-x)^2)*2
c <- exp(-(6-x)^2)*1
return(list(Score = a+b+c))
}
bounds <- list(x = c(0,8)) #set lower/upper bound for search region
Results <- bayesOpt(
FUN = scoringFunction,
bounds = bounds,
initPoints = 3,
iters.n = 10,
acq = "ei", #many other choices
gsPoints = 10
)
getBestPars(Results,2)
getBestPars(Results,3)
getBestPars(Results,10)
getBestPars(Results,111)
getBestPars(Results,11)
getBestPars(Results,13)
getBestPars(Results,14)
getBestPars(Results,1)
plot(Results)
codes = c("10000", "01000", "11000", "01010", "11100", "10110", "11110", "11111")
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "model_matrix", y = "shape_parameter", fill= "RMSE")) +
geom_tile() + xlab("model matrix") + ylab("shape parameter") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
codes = c("10000", "01000", "11000", "01010", "11100", "10110", "11110", "11111")
cv.rmse = as.vector(apply(cv.res, c(1,2), median))
cv.dat = data.frame(expand.grid(as.factor(codes), v), cv.rmse)
colnames(cv.dat) = c("model_matrix", "shape_parameter", "RMSE")
# quilt.plot(tune.par, cv.rmse)
ggplot(cv.dat, aes_string(x = "model_matrix", y = "shape_parameter", fill= "RMSE")) +
geom_tile() + xlab("model matrix") + ylab("shape parameter") +
scale_fill_distiller(palette = "YlOrRd", direction = 1) + theme_bw()
scoringFunction <- function(x) {
a <- exp(-(2-x)^2)*1.5
b <- exp(-(4-x)^2)*2
c <- exp(-(6-x)^2)*1
return(list(Score = a+b+c))
}
bounds <- list(x = c(0,8)) #set lower/upper bound for search region
Results <- bayesOpt(
FUN = scoringFunction,
bounds = bounds,
initPoints = 3,
iters.n = 10,
acq = "ei", #many other choices
gsPoints = 10
)
plot(Results)
plot(Results)
addIterations(Results)
addIterations(Results, 10)
plot(Results)
addIterations(Results, 12)
plot(Results)
plot(Results, xlim = c(0,20))
Results$scoreSummary
Results = addIterations(Results, 12)
plot(Results)
Results = addIterations(Results, 5)
plot(Results)
library(fields)   #tools for spatial data
library(spatstat) #tools for analyzing point patterns
source("~/.active-rstudio-document", echo=TRUE)
install.packages("spatstat")
install.packages("spatstat")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("ggmap")
install.packages("maps")
install.packages("maps")
install.packages("maps")
library(fields)   #tools for spatial data
library(spatstat) #tools for analyzing point patterns
library(ggmap)       #google map
library(maps)        #map tools
library(maptools)    #map tools
library(mapproj)
install.packages("ggmap")
install.packages("ggmap")
install.packages("maps")
install.packages("maptools")
install.packages("mapproj")
install.packages("sf")
twn_county_shp <- st_read("TOWN_MOI_1100415.shp",  stringsAsFactors = FALSE)
library(sf)      #read shp file
library(plyr)
library(dplyr)
twn_county_shp <- st_read("TOWN_MOI_1100415.shp",  stringsAsFactors = FALSE)
twn_county_shp <- st_read("TOWN_MOI_1100415.shp",  stringsAsFactors = FALSE)
twn_county_shp <- st_read("TOWN_MOI_1100415.shp",  stringsAsFactors = FALSE)
getwd()
setwd("/Users/luke/Practicing Statistics")
setwd("/Users/luke/Practicing // Statistics")
setwd("/Users/luke/Practicing\\Statistics")
setwd("/Users/luke/Practicing\ \Statistics")
setwd("/Users/luke/Practicing \ \ Statistics")
setwd("/Users/luke/Practicing \\ Statistics")
twn_county_shp <- st_read("TOWN_MOI_1100415.shp",  stringsAsFactors = FALSE)
getwd()
