nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("w[", nums, "]"))
}
make_nu_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("nu[", nums, "]"))
}
boot_result = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_W_optimal_OR6.RDS"), collapse = ""))
model_combinations = c("1", "2", "3", "12", "13", "23", "123")
boot_effect_se = rep(NA, 8)
# boot_se_se = rep(NA, 8)
layout_matrix = matrix(nrow = 14, ncol = 6)
for(i in 1:7){
layout_matrix[2*(i-1)+1, 1:6] = i+6*(i-1)
layout_matrix[2*(i-1)+2,] = (i+6*(i-1)+1):(i+6*(i-1)+6)
}
layout(layout_matrix, heights = rep(c(1, 5), 7))
for(k in 1:7){
par(mar = c(0, 0, 2, 0))
plot.new()
title(paste("model set:", model_combinations[k]), cex.main = 1.5)
par(mar = c(4, 2, 2, 2), pty = "s")
theta.hat = paste0("theta.hat", k)
se_theta.hat = paste0("se_theta.hat", k)
w.hat = rownames(boot_result)[grepl(paste0("w.hat", k), rownames(boot_result))]
nu.hat = rownames(boot_result)[grepl(paste0("nu.hat", k), rownames(boot_result))]
w.hat1 = w.hat[1:(length(w.hat)/2)]
w.hat2 = w.hat[(length(w.hat)/2+1):length(w.hat)]
nu.hat1 = nu.hat[1:(length(nu.hat)/2)]
nu.hat2 = nu.hat[(length(nu.hat)/2+1):length(nu.hat)]
qqnorm(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]), main = expression(hat(theta)))
boot_effect_se[k] = sd(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]))
qqnorm(rm.extreme(boot_result[se_theta.hat, !is.na(boot_result[se_theta.hat,])]), main = expression(widehat("SE")(hat(theta))))
if(length(w.hat) == 2){
plot.new()
plot.new()
plot.new()
plot.new()
}else{
boxplot(t(boot_result[w.hat1,]), main = expression(paste(hat(bold(w)), " for ", p[0])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[w.hat2,]), main = expression(paste(hat(bold(w)), " for ", p[1])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat1,]), main = expression(paste(hat(bold(nu)), " for ", p[0])),
names = make_nu_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat2,]), main = expression(paste(hat(bold(nu)), " for ", p[1])),
names = make_nu_labels(model_combinations[k]))
}
# abline(v = all_results[k, 2], col = 2, lwd = 2.5)
# boot_se_se[k] = quantile(rm.extreme_se(boot_result[3, !is.na(boot_result[3,])]), .95)
}
boot_effect_se[8] = sd(rm.extreme(boot_result["theta_cc", !is.na(boot_result["theta_cc",])]))
# boot_se_se[8] = quantile(rm.extreme_se(boot_result["se_theta_cc", !is.na(boot_result["se_theta_cc",])]), .95)
boot_effect_se
# boot_se_se
full_results = cbind(all_results, boot_effect_se)
full_results = as.data.frame(full_results)
full_results = cbind(round(full_results, 3),
apply(cbind(full_results[, 1] - qnorm(0.975)*full_results[, 2],
full_results[, 1] + qnorm(0.975)*full_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(full_results) = c("$\\hat{\\theta}_{100}$","$\\hat{\\theta}_{010}$", "$\\hat{\\theta}_{001}$",
"$\\hat{\\theta}_{110}$", "$\\hat{\\theta}_{101}$", "$\\hat{\\theta}_{011}$",
"$\\hat{\\theta}_{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(full_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(full_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position"))
full_results
full_results
boot_effect_se
full_results = cbind(all_results, boot_effect_se)
full_results = as.data.frame(full_results)
full_results = cbind(round(full_results, 3),
apply(cbind(full_results[, 1] - qnorm(0.975)*full_results[, 2],
full_results[, 1] + qnorm(0.975)*full_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(full_results) = c("$\\hat{\\theta}_{100}$","$\\hat{\\theta}_{010}$", "$\\hat{\\theta}_{001}$",
"$\\hat{\\theta}_{110}$", "$\\hat{\\theta}_{101}$", "$\\hat{\\theta}_{011}$",
"$\\hat{\\theta}_{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(full_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(full_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position"))
38/720
perturb_bootstrap = function(full_ps_specifications, W, data, B){
library(foreach)
library(doParallel)
library(doSNOW)
library(EBMRalgorithm)
n = nrow(data)
# rgen = function(n) sample(c(-1, 1), size = n, replace = TRUE)
rgen = function(n) rexp(n)
cores = detectCores()
cl = makeCluster(cores - 4) ## number of clusters
registerDoSNOW(cl)
pb = txtProgressBar(max = B, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
parallel_packages = c("EBMRalgorithm", "stringr", "Matrix", "numDeriv")
boot_result = foreach(i= 1:B, .combine = 'cbind', .options.snow = opts, .packages = parallel_packages, .export = c("WangShaoKim2014", "ensemble", "estimate_nu", "WangShaoKim2014_perturb", "EBMR_IPW_perturb", "estimate_nu_perturb", "ensemble_perturb", "parse_formula", "separate_variable_types", "effect.f", "delta_method")) %dopar% {
result = tryCatch({
wt = rexp(n)
theta.hat = se_theta.hat = rep(NA, 7)
w.hat.list = list(w.hat1 = c(), w.hat2 = c(), w.hat3 = c(), w.hat4 = c(), w.hat5 = c(), w.hat6 = c(), w.hat7 = c())
nu.hat.list = list(nu.hat1 = c(), nu.hat2 = c(), nu.hat3 = c(), nu.hat4 = c(), nu.hat5 = c(), nu.hat6 = c(), nu.hat7 = c())
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
model_set = model_combinations[, i]
print(c(model_num, i))
ps_specifications <- list(
formula.list = full_ps_specifications$formula.list[model_set],
h_x_names.list = full_ps_specifications$h_x_names.list[model_set],
inv_link = full_ps_specifications$inv_link
)
p.hat = se_p.hat = p_cc = se_p_cc = rep(NA, 2)
w.hat = nu.hat = c()
for(l in 1:2){
subdat = data[data$health == (l-1),]
subwt = wt[data$health == (l-1)]
ps_fit.list = list()
J = length(ps_specifications$formula.list)
for(j in 1:J){
formula = ps_specifications$formula.list[[j]]
h_x_names = ps_specifications$h_x_names.list[[j]]
inv_link = ps_specifications$inv_link
ps_fit.list[[j]] = WangShaoKim2014_perturb(formula, h_x_names, inv_link, W, data = subdat, subwt, se.fit = F)
# ps_fit.list[[j]] = WangShaoKim2014(formula, h_x_names, inv_link, W = W, data = subdat)
}
result = EBMR_IPW_perturb(h_x_names = c("father", "parent_report"), W, data = subdat, subwt, se.fit = F)
p.hat[l] = result$mu_ipw
se_p.hat[l] = result$se_ipw
w.hat = c(w.hat, result$w.hat)
nu.hat = c(nu.hat, result$nu.hat)
subwt_cc = wt[data$health == (l-1) & data$r == 1]
p_cc[l] = mean(subwt_cc*subdat$teacher_report[subdat$r == 1])
se_p_cc[l] = sd(subdat$teacher_report[subdat$r == 1])/sqrt(sum(subdat$r == 1))
}
theta.hat[k] = effect.f(p.hat[1], p.hat[2])
theta_cc = effect.f(p_cc[1], p_cc[2])
se_theta.hat[k] = sqrt((delta_method(p.hat[1], p.hat[2])^2)%*%(se_p.hat^2))
se_theta_cc = sqrt(delta_method(p_cc[1], p_cc[2])%*%(se_p_cc^2))
w.hat.list[[k]] = w.hat
nu.hat.list[[k]] = nu.hat
k = k + 1
}
}
# ebmr = EBMRAlgorithm$new(y_names = "teacher_report",
#                          ps_specifications = ps_specifications,
#                          data = boot_dat)
# result = ebmr$EBMR_IPW(h_x_names = c("father", "parent_report"))
# result$w.hat
# cor(result$ps.matrix)
# ebmr$ps_fit.list[[3]]$coefficients
# ebmr$ps_fit.list[[3]]$se
# estimates = unlist(result[c(1, 3)])
# estimates
c(theta.hat = theta.hat, theta_cc = theta_cc, se_theta.hat = se_theta.hat, se_theta_cc = se_theta_cc,
unlist(w.hat.list), unlist(nu.hat.list))
}, error = function(e){
NA
})
}
return(boot_result)
}
#------------------------------------------------------------------------------#
# Basic Setup ----
#------------------------------------------------------------------------------#
full_ps_specifications = list(
formula.list = list(
r ~ o(teacher_report) + father,
r ~ o(teacher_report) + parent_report,
r ~ o(teacher_report)
),
h_x_names.list = list(
c("father", "parent_report"),
c("father", "parent_report"),
c("father", "parent_report")
),
inv_link = function(eta) 1/(1+exp(eta))
)
# OR5
# W = function(g.matrix){
#   return(diag(ncol(g.matrix)))
# }
# OR6
W = function(g.matrix){
return(solve(t(g.matrix)%*%g.matrix/nrow(g.matrix)))
}
health = 0:1
subset_names = c("health0", "health1")
effect.f = function(x, y) log((y/(1-y))/(x/(1-x)))
delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
((1/y^2)/((1/y-1)^2))/(x/(1-x)))/exp(effect.f(x, y))
# effect.f = function(x, y) (y/(1-y))/(x/(1-x))
# delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
#                                 ((1/y^2)/((1/y-1)^2))/(x/(1-x)))
boot = TRUE
B = 500
B = 1000
#------------------------------------------------------------------------------#
# Bootstrap ----
#------------------------------------------------------------------------------#
dat$y = dat$teacher_report
# boot_result = perturb_bootstrap(full_ps_specifications, W, dat, B)
boot_result = bootstrap(full_ps_specifications, W, dat, B)
#------------------------------------------------------------------------------#
# Bootstrap ----
#------------------------------------------------------------------------------#
dat$y = dat$teacher_report
boot_result = perturb_bootstrap(full_ps_specifications, W, dat, B)
# boot_result = bootstrap(full_ps_specifications, W, dat, B)
# boot_result = parametric_bootstrap(outcome_distr, full_ps_specifications, W, dat, B)
save.file = paste0(c("MHD_results/EBMR_IPW_perturb_bootstrap_W_optimal_OR6.RDS"), collapse = "")
# save.file = paste0(c("MHD_results/EBMR_IPW_perturb_bootstrap_W_identity_OR9.RDS"), collapse = "")
# save.file = paste0(c("MHD_results/EBMR_IPW_perturb_bootstrap_W_identity_OR10.RDS"), collapse = "")
# if(file.exists(save.file)){
#   boot_result = cbind(readRDS(save.file), boot_result)
#   saveRDS(boot_result, save.file)
# }else{
#   saveRDS(boot_result, save.file)
# }
saveRDS(boot_result, save.file)
print(sum(is.na(boot_result[1,])))
print(apply(boot_result, 1, mean, na.rm = T))
print(apply(boot_result, 1, sd, na.rm = T))
################################################################################
effect.f = function(x, y) log((y/(1-y))/(x/(1-x)))
delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
((1/y^2)/((1/y-1)^2))/(x/(1-x)))/exp(effect.f(x, y))
# effect.f = function(x, y) (y/(1-y))/(x/(1-x))
# delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
#                                 ((1/y^2)/((1/y-1)^2))/(x/(1-x)))
effect.f = function(x, y) log((y/(1-y))/(x/(1-x)))
delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
((1/y^2)/((1/y-1)^2))/(x/(1-x)))/exp(effect.f(x, y))
# effect.f = function(x, y) (y/(1-y))/(x/(1-x))
# delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
#                                 ((1/y^2)/((1/y-1)^2))/(x/(1-x)))
all_results = matrix(NA, 8, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
all_estimates = matrix(NA, length(health), 2)
model_set = model_combinations[, i]
# if((4 %in% model_set0) || !(1 %in% model_set0)) next
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set, "_W_optimal_OR6.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set, "_W_optimal_OR6.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = effect.f(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
# effect = all_estimates[2, 1] - all_estimates[1, 1]
# se = sqrt(all_estimates[1, 2]^2+all_estimates[2, 2]^2)
all_results[k, ] = c(effect, se)
k = k + 1
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[8, ] = c(effect.f(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# all_results[20,] = c(mu_cc1-mu_cc0, sqrt(se_cc1^2+se_cc0^2))
all_results
# res.tmp = res
rm.extreme_se = function(v){
v = v[v < quantile(v, 0.98)]
return(v)
}
make_w_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("w[", nums, "]"))
}
make_nu_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("nu[", nums, "]"))
}
boot_result = readRDS(paste0(c("MHD_results/EBMR_IPW_perturb_bootstrap_W_optimal_OR6.RDS"), collapse = ""))
model_combinations = c("1", "2", "3", "12", "13", "23", "123")
boot_effect_se = rep(NA, 8)
# boot_se_se = rep(NA, 8)
layout_matrix = matrix(nrow = 14, ncol = 6)
for(i in 1:7){
layout_matrix[2*(i-1)+1, 1:6] = i+6*(i-1)
layout_matrix[2*(i-1)+2,] = (i+6*(i-1)+1):(i+6*(i-1)+6)
}
layout(layout_matrix, heights = rep(c(1, 5), 7))
for(k in 1:7){
par(mar = c(0, 0, 2, 0))
plot.new()
title(paste("model set:", model_combinations[k]), cex.main = 1.5)
par(mar = c(4, 2, 2, 2), pty = "s")
theta.hat = paste0("theta.hat", k)
se_theta.hat = paste0("se_theta.hat", k)
w.hat = rownames(boot_result)[grepl(paste0("w.hat", k), rownames(boot_result))]
nu.hat = rownames(boot_result)[grepl(paste0("nu.hat", k), rownames(boot_result))]
w.hat1 = w.hat[1:(length(w.hat)/2)]
w.hat2 = w.hat[(length(w.hat)/2+1):length(w.hat)]
nu.hat1 = nu.hat[1:(length(nu.hat)/2)]
nu.hat2 = nu.hat[(length(nu.hat)/2+1):length(nu.hat)]
qqnorm(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]), main = expression(hat(theta)))
boot_effect_se[k] = sd(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]))
qqnorm(rm.extreme(boot_result[se_theta.hat, !is.na(boot_result[se_theta.hat,])]), main = expression(widehat("SE")(hat(theta))))
if(length(w.hat) == 2){
plot.new()
plot.new()
plot.new()
plot.new()
}else{
boxplot(t(boot_result[w.hat1,]), main = expression(paste(hat(bold(w)), " for ", p[0])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[w.hat2,]), main = expression(paste(hat(bold(w)), " for ", p[1])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat1,]), main = expression(paste(hat(bold(nu)), " for ", p[0])),
names = make_nu_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat2,]), main = expression(paste(hat(bold(nu)), " for ", p[1])),
names = make_nu_labels(model_combinations[k]))
}
# abline(v = all_results[k, 2], col = 2, lwd = 2.5)
# boot_se_se[k] = quantile(rm.extreme_se(boot_result[3, !is.na(boot_result[3,])]), .95)
}
effect.f = function(x, y) log((y/(1-y))/(x/(1-x)))
delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
((1/y^2)/((1/y-1)^2))/(x/(1-x)))/exp(effect.f(x, y))
# effect.f = function(x, y) (y/(1-y))/(x/(1-x))
# delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
#                                 ((1/y^2)/((1/y-1)^2))/(x/(1-x)))
all_results = matrix(NA, 8, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
all_estimates = matrix(NA, length(health), 2)
model_set = model_combinations[, i]
# if((4 %in% model_set0) || !(1 %in% model_set0)) next
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set, "_W_optimal_OR6.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set, "_W_optimal_OR6.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = effect.f(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
# effect = all_estimates[2, 1] - all_estimates[1, 1]
# se = sqrt(all_estimates[1, 2]^2+all_estimates[2, 2]^2)
all_results[k, ] = c(effect, se)
k = k + 1
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[8, ] = c(effect.f(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# all_results[20,] = c(mu_cc1-mu_cc0, sqrt(se_cc1^2+se_cc0^2))
all_results
# res.tmp = res
rm.extreme_se = function(v){
v = v[v < quantile(v, 0.98)]
return(v)
}
make_w_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("w[", nums, "]"))
}
make_nu_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("nu[", nums, "]"))
}
boot_result = readRDS(paste0(c("MHD_results/EBMR_IPW_perturb_bootstrap_W_optimal_OR6.RDS"), collapse = ""))
model_combinations = c("1", "2", "3", "12", "13", "23", "123")
boot_effect_se = rep(NA, 8)
# boot_se_se = rep(NA, 8)
layout_matrix = matrix(nrow = 14, ncol = 6)
for(i in 1:7){
layout_matrix[2*(i-1)+1, 1:6] = i+6*(i-1)
layout_matrix[2*(i-1)+2,] = (i+6*(i-1)+1):(i+6*(i-1)+6)
}
layout(layout_matrix, heights = rep(c(1, 5), 7))
for(k in 1:7){
par(mar = c(0, 0, 2, 0))
plot.new()
title(paste("model set:", model_combinations[k]), cex.main = 1.5)
par(mar = c(4, 2, 2, 2), pty = "s")
theta.hat = paste0("theta.hat", k)
se_theta.hat = paste0("se_theta.hat", k)
w.hat = rownames(boot_result)[grepl(paste0("w.hat", k), rownames(boot_result))]
nu.hat = rownames(boot_result)[grepl(paste0("nu.hat", k), rownames(boot_result))]
w.hat1 = w.hat[1:(length(w.hat)/2)]
w.hat2 = w.hat[(length(w.hat)/2+1):length(w.hat)]
nu.hat1 = nu.hat[1:(length(nu.hat)/2)]
nu.hat2 = nu.hat[(length(nu.hat)/2+1):length(nu.hat)]
qqnorm(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]), main = expression(hat(theta)))
boot_effect_se[k] = sd(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]))
qqnorm(rm.extreme(boot_result[se_theta.hat, !is.na(boot_result[se_theta.hat,])]), main = expression(widehat("SE")(hat(theta))))
if(length(w.hat) == 2){
plot.new()
plot.new()
plot.new()
plot.new()
}else{
boxplot(t(boot_result[w.hat1,]), main = expression(paste(hat(bold(w)), " for ", p[0])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[w.hat2,]), main = expression(paste(hat(bold(w)), " for ", p[1])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat1,]), main = expression(paste(hat(bold(nu)), " for ", p[0])),
names = make_nu_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat2,]), main = expression(paste(hat(bold(nu)), " for ", p[1])),
names = make_nu_labels(model_combinations[k]))
}
# abline(v = all_results[k, 2], col = 2, lwd = 2.5)
# boot_se_se[k] = quantile(rm.extreme_se(boot_result[3, !is.na(boot_result[3,])]), .95)
}
rm.extreme_se = function(v){
v = v[v < quantile(v, 0.98)]
return(v)
}
make_w_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("w[", nums, "]"))
}
make_nu_labels <- function(num_str) {
nums <- as.integer(strsplit(num_str, "")[[1]])
parse(text = paste0("nu[", nums, "]"))
}
boot_result = readRDS(paste0(c("MHD_results/EBMR_IPW_perturb_bootstrap_W_optimal_OR6.RDS"), collapse = ""))
model_combinations = c("1", "2", "3", "12", "13", "23", "123")
boot_effect_se = rep(NA, 8)
# boot_se_se = rep(NA, 8)
layout_matrix = matrix(nrow = 14, ncol = 6)
for(i in 1:7){
layout_matrix[2*(i-1)+1, 1:6] = i+6*(i-1)
layout_matrix[2*(i-1)+2,] = (i+6*(i-1)+1):(i+6*(i-1)+6)
}
layout(layout_matrix, heights = rep(c(1, 5), 7))
for(k in 1:7){
par(mar = c(0, 0, 2, 0))
plot.new()
title(paste("model set:", model_combinations[k]), cex.main = 1.5)
par(mar = c(4, 2, 2, 2), pty = "s")
theta.hat = paste0("theta.hat", k)
se_theta.hat = paste0("se_theta.hat", k)
w.hat = rownames(boot_result)[grepl(paste0("w.hat", k), rownames(boot_result))]
nu.hat = rownames(boot_result)[grepl(paste0("nu.hat", k), rownames(boot_result))]
w.hat1 = w.hat[1:(length(w.hat)/2)]
w.hat2 = w.hat[(length(w.hat)/2+1):length(w.hat)]
nu.hat1 = nu.hat[1:(length(nu.hat)/2)]
nu.hat2 = nu.hat[(length(nu.hat)/2+1):length(nu.hat)]
qqnorm(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]), main = expression(hat(theta)))
boot_effect_se[k] = sd(rm.extreme(boot_result[theta.hat, !is.na(boot_result[theta.hat,])]))
# qqnorm(rm.extreme(boot_result[se_theta.hat, !is.na(boot_result[se_theta.hat,])]), main = expression(widehat("SE")(hat(theta))))
plot.new()
if(length(w.hat) == 2){
plot.new()
plot.new()
plot.new()
plot.new()
}else{
boxplot(t(boot_result[w.hat1,]), main = expression(paste(hat(bold(w)), " for ", p[0])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[w.hat2,]), main = expression(paste(hat(bold(w)), " for ", p[1])),
names = make_w_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat1,]), main = expression(paste(hat(bold(nu)), " for ", p[0])),
names = make_nu_labels(model_combinations[k]))
boxplot(t(boot_result[nu.hat2,]), main = expression(paste(hat(bold(nu)), " for ", p[1])),
names = make_nu_labels(model_combinations[k]))
}
# abline(v = all_results[k, 2], col = 2, lwd = 2.5)
# boot_se_se[k] = quantile(rm.extreme_se(boot_result[3, !is.na(boot_result[3,])]), .95)
}
boot_effect_se[8] = sd(rm.extreme(boot_result["theta_cc", !is.na(boot_result["theta_cc",])]))
# boot_se_se[8] = quantile(rm.extreme_se(boot_result["se_theta_cc", !is.na(boot_result["se_theta_cc",])]), .95)
boot_effect_se
# boot_se_se
full_results = cbind(all_results, boot_effect_se)
full_results = as.data.frame(full_results)
full_results = cbind(round(full_results, 3),
apply(cbind(full_results[, 1] - qnorm(0.975)*full_results[, 2],
full_results[, 1] + qnorm(0.975)*full_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(full_results) = c("$\\hat{\\theta}_{100}$","$\\hat{\\theta}_{010}$", "$\\hat{\\theta}_{001}$",
"$\\hat{\\theta}_{110}$", "$\\hat{\\theta}_{101}$", "$\\hat{\\theta}_{011}$",
"$\\hat{\\theta}_{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(full_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(full_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position"))
16/258
possibly_true_ps.vector = 1
exp_tilt_x_names = NULL
xi.vector.list = list(
xi.vector0 = seq(0, nrow(dat[dat$health == 0, ])^(-1/2), length.out = 30),
xi.vector1 = seq(0, nrow(dat[dat$health == 1, ])^(-1/2), length.out = 30)
)
possibly_true_ps.vector = c(1, 1)
exp_tilt_x_names = NULL
xi.vector.list = list(
xi.vector0 = seq(0, nrow(dat[dat$health == 0, ])^(-1/2), length.out = 30),
xi.vector1 = seq(0, nrow(dat[dat$health == 1, ])^(-1/2), length.out = 30)
)
