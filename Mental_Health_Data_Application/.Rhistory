"$\\hat{\\theta}_{101}^{110}$", "$\\hat{\\theta}_{101}^{101}$", "$\\hat{\\theta}_{101}^{011}$",
"$\\hat{\\theta}_{011}^{110}$", "$\\hat{\\theta}_{011}^{101}$", "$\\hat{\\theta}_{011}^{011}$",
"$\\hat{\\theta}_{111}^{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(all_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(all_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position")) %>%
row_spec(9, hline_after = T) %>%
row_spec(18, hline_after = T) %>%
row_spec(19, hline_after = T)
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
boot_se_ipw[k] = sd(rm.extreme(boot.effect))
hist(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
# boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
boot_se_ipw[20] = sd(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
all_results = matrix(NA, 20, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
all_estimates = matrix(NA, length(health), 2)
model_set0 = model_combinations[, i]
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
all_results[k, ] = c(effect, se)
k = k + 1
}
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[20, ] = c(odds_ratio(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# res.tmp = res
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
boot_se_ipw[k] = sd(rm.extreme(boot.effect))
hist(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
# boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
boot_se_ipw[20] = sd(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
all_results = cbind(all_results, boot_se_ipw)
all_results = as.data.frame(all_results)
all_results = cbind(round(all_results, 3),
apply(cbind(all_results[, 1] - qnorm(0.975)*all_results[, 2],
all_results[, 1] + qnorm(0.975)*all_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(all_results) = c("$\\hat{\\theta}_{100}^{100}$", "$\\hat{\\theta}_{100}^{010}$", "$\\hat{\\theta}_{100}^{001}$",
"$\\hat{\\theta}_{010}^{100}$", "$\\hat{\\theta}_{010}^{010}$", "$\\hat{\\theta}_{010}^{001}$",
"$\\hat{\\theta}_{001}^{100}$", "$\\hat{\\theta}_{001}^{010}$", "$\\hat{\\theta}_{001}^{001}$",
"$\\hat{\\theta}_{110}^{110}$", "$\\hat{\\theta}_{110}^{101}$", "$\\hat{\\theta}_{110}^{011}$",
"$\\hat{\\theta}_{101}^{110}$", "$\\hat{\\theta}_{101}^{101}$", "$\\hat{\\theta}_{101}^{011}$",
"$\\hat{\\theta}_{011}^{110}$", "$\\hat{\\theta}_{011}^{101}$", "$\\hat{\\theta}_{011}^{011}$",
"$\\hat{\\theta}_{111}^{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(all_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(all_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position")) %>%
row_spec(9, hline_after = T) %>%
row_spec(18, hline_after = T) %>%
row_spec(19, hline_after = T)
all_results = matrix(NA, 20, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
all_estimates = matrix(NA, length(health), 2)
model_set0 = model_combinations[, i]
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
all_results[k, ] = c(effect, se)
k = k + 1
}
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[20, ] = c(odds_ratio(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# res.tmp = res
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
mad_sd <- function(x) 1.4826 * median(abs(x - median(x)))
boot_se_ipw[k] = mad_sd(rm.extreme(boot.effect))
hist(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
# boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
boot_se_ipw[20] = sd(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
all_results = cbind(all_results, boot_se_ipw)
all_results = as.data.frame(all_results)
all_results = cbind(round(all_results, 3),
apply(cbind(all_results[, 1] - qnorm(0.975)*all_results[, 2],
all_results[, 1] + qnorm(0.975)*all_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(all_results) = c("$\\hat{\\theta}_{100}^{100}$", "$\\hat{\\theta}_{100}^{010}$", "$\\hat{\\theta}_{100}^{001}$",
"$\\hat{\\theta}_{010}^{100}$", "$\\hat{\\theta}_{010}^{010}$", "$\\hat{\\theta}_{010}^{001}$",
"$\\hat{\\theta}_{001}^{100}$", "$\\hat{\\theta}_{001}^{010}$", "$\\hat{\\theta}_{001}^{001}$",
"$\\hat{\\theta}_{110}^{110}$", "$\\hat{\\theta}_{110}^{101}$", "$\\hat{\\theta}_{110}^{011}$",
"$\\hat{\\theta}_{101}^{110}$", "$\\hat{\\theta}_{101}^{101}$", "$\\hat{\\theta}_{101}^{011}$",
"$\\hat{\\theta}_{011}^{110}$", "$\\hat{\\theta}_{011}^{101}$", "$\\hat{\\theta}_{011}^{011}$",
"$\\hat{\\theta}_{111}^{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(all_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(all_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position")) %>%
row_spec(9, hline_after = T) %>%
row_spec(18, hline_after = T) %>%
row_spec(19, hline_after = T)
all_results = matrix(NA, 20, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
all_estimates = matrix(NA, length(health), 2)
model_set0 = model_combinations[, i]
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
all_results[k, ] = c(effect, se)
k = k + 1
}
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[20, ] = c(odds_ratio(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# res.tmp = res
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
iqr_sd <- function(x) IQR(x) / 1.349
boot_se_ipw[k] = iqr_sd(rm.extreme(boot.effect))
hist(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
# boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
boot_se_ipw[20] = sd(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
all_results = cbind(all_results, boot_se_ipw)
all_results = as.data.frame(all_results)
all_results = cbind(round(all_results, 3),
apply(cbind(all_results[, 1] - qnorm(0.975)*all_results[, 2],
all_results[, 1] + qnorm(0.975)*all_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(all_results) = c("$\\hat{\\theta}_{100}^{100}$", "$\\hat{\\theta}_{100}^{010}$", "$\\hat{\\theta}_{100}^{001}$",
"$\\hat{\\theta}_{010}^{100}$", "$\\hat{\\theta}_{010}^{010}$", "$\\hat{\\theta}_{010}^{001}$",
"$\\hat{\\theta}_{001}^{100}$", "$\\hat{\\theta}_{001}^{010}$", "$\\hat{\\theta}_{001}^{001}$",
"$\\hat{\\theta}_{110}^{110}$", "$\\hat{\\theta}_{110}^{101}$", "$\\hat{\\theta}_{110}^{011}$",
"$\\hat{\\theta}_{101}^{110}$", "$\\hat{\\theta}_{101}^{101}$", "$\\hat{\\theta}_{101}^{011}$",
"$\\hat{\\theta}_{011}^{110}$", "$\\hat{\\theta}_{011}^{101}$", "$\\hat{\\theta}_{011}^{011}$",
"$\\hat{\\theta}_{111}^{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(all_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(all_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position")) %>%
row_spec(9, hline_after = T) %>%
row_spec(18, hline_after = T) %>%
row_spec(19, hline_after = T)
all_results = matrix(NA, 20, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
all_estimates = matrix(NA, length(health), 2)
model_set0 = model_combinations[, i]
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
all_results[k, ] = c(effect, se)
k = k + 1
}
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[20, ] = c(odds_ratio(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# res.tmp = res
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
boot_se_ipw[k] = sd(rm.extreme(boot.effect))
hist(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
# boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
boot_se_ipw[20] = sd(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
options(knitr.kable.NA = '')
knitr::opts_chunk$set(echo = FALSE, fig.height = 10, fig.width = 16, fig.align = "center")
# devtools::install_github("LukeChuang890212/EBMR_Methods_Reproducibility_Materials/EBMRalgorithm")
library(EBMRalgorithm)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(ggpubr)
all_results = matrix(NA, 20, 2)
k = 1
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
all_estimates = matrix(NA, length(health), 2)
model_set0 = model_combinations[, i]
result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_estimates[1, ] = unlist(result0[c(1, 3)])
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_estimates[2, ] = unlist(result1[c(1, 3)])
effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
all_results[k, ] = c(effect, se)
k = k + 1
}
}
}
cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[20, ] = c(odds_ratio(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
# res.tmp = res
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR1.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR1.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
boot_se_ipw[k] = sd(rm.extreme(boot.effect))
hist(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
# boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
boot_se_ipw[20] = sd(rm.extreme(boot.effect))
# boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
# boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
# boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
all_results = cbind(all_results, boot_se_ipw)
all_results = as.data.frame(all_results)
all_results = cbind(round(all_results, 3),
apply(cbind(all_results[, 1] - qnorm(0.975)*all_results[, 2],
all_results[, 1] + qnorm(0.975)*all_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(all_results) = c("$\\hat{\\theta}_{100}^{100}$", "$\\hat{\\theta}_{100}^{010}$", "$\\hat{\\theta}_{100}^{001}$",
"$\\hat{\\theta}_{010}^{100}$", "$\\hat{\\theta}_{010}^{010}$", "$\\hat{\\theta}_{010}^{001}$",
"$\\hat{\\theta}_{001}^{100}$", "$\\hat{\\theta}_{001}^{010}$", "$\\hat{\\theta}_{001}^{001}$",
"$\\hat{\\theta}_{110}^{110}$", "$\\hat{\\theta}_{110}^{101}$", "$\\hat{\\theta}_{110}^{011}$",
"$\\hat{\\theta}_{101}^{110}$", "$\\hat{\\theta}_{101}^{101}$", "$\\hat{\\theta}_{101}^{011}$",
"$\\hat{\\theta}_{011}^{110}$", "$\\hat{\\theta}_{011}^{101}$", "$\\hat{\\theta}_{011}^{011}$",
"$\\hat{\\theta}_{111}^{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(all_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(all_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position")) %>%
row_spec(9, hline_after = T) %>%
row_spec(18, hline_after = T) %>%
row_spec(19, hline_after = T)
