#' ebmr <- EBMRAlgorithm$new(data = data)
#' ipw_estimates <- ebmr$EBMR_IPW(h_x_names = covariates, true_ps = true_ps_data)
#' print(ipw_estimates)
#' }
EBMR_IPW = function(h_x_names, true_ps = NULL) {
# Basic setup
r = as.matrix(private$r)
y = as.matrix(private$y)
n = private$n
################################################################################
# Collect the propensity score models
################################################################################
J = length(self$ps_fit.list)
ps_model.list = lapply(self$ps_fit.list, function(ps_fit) ps_fit$model)
alpha.list = lapply(self$ps_fit.list, function(ps_fit) ps_fit$coefficients)
alpha_dim = unlist(lapply(alpha.list, length))
ps.matrix = do.call(cbind, lapply(self$ps_fit.list, function(ps_fit) ps_fit$fitted.values))
################################################################################
################################################################################
# Ensemble step
################################################################################
ensemble_fit = private$estimate_nu(ps.matrix, self$data[h_x_names], init = rep(1/J, J))
nu.hat = ensemble_fit$coefficients
w.hat = nu.hat^2/sum(nu.hat^2)
ensemble_ps = ps.matrix%*%w.hat
################################################################################
################################################################################
# Compute necessary quantities to estimate the influence function:
# \psi(\bm{\alpha}_*, \bm{\nu}_*)
################################################################################
dot_pi = matrix(NA, n, sum(alpha_dim))
for(j in 1:J){
x = as.matrix(self$data[self$ps_fit.list[[j]]$model_x_names])
dot_pi[, (sum(alpha_dim[0:(j-1)])+1):sum(alpha_dim[1:j])] = jacobian(function(alpha) ps_model.list[[j]](x, y, alpha), alpha.list[[j]])
}
E_dot_g = -(t(dot_pi)*rep(w.hat, alpha_dim))%*%(ensemble_fit$h_x*as.vector(r*((ensemble_ps)^(-2))))/n
dot_W = function(nu){
(diag(2*nu)*sum(nu^2)-2*(nu)%*%t(nu^2))/(sum(nu^2)^2)
}
dot_W_nu_hat = 0; if(length(nu.hat) > 1) dot_W_nu_hat = dot_W(nu.hat)
H_alpha.w = apply(t((t(dot_pi)*rep(w.hat, alpha_dim)))*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
w.H_nu = apply(ps.matrix%*%t(dot_W_nu_hat)*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
K_alpha = c(lapply(self$ps_fit.list, function(ps_fit) ps_fit$K)) %>% bdiag()
g_all = do.call(rbind, lapply(self$ps_fit.list, function(ps_fit) t(ps_fit$g.matrix)))
K_nu = ensemble_fit$K
g = t(ensemble_fit$g.matrix)
################################################################################
################################################################################
# IPW estimator for the population mean mu_0 with propensity score being estimated
# by the methods of Wang, Shao and Kim (2014).
################################################################################
mu_ipw = mean(r/ensemble_ps*y)
mu_ipw.iid = as.vector(t(r/ensemble_ps*y)
+(t(H_alpha.w)-t(w.H_nu)%*%K_nu%*%t(E_dot_g))%*%K_alpha%*%g_all
+t(w.H_nu)%*%K_nu%*%g)
se_ipw = sqrt(var(mu_ipw.iid)/n)
################################################################################
################################################################################
# IPW estimator for the population mean mu_0 with known propensity score.
################################################################################
mu_ipw.true = NA
se_ipw.true = NA
if(!is.null(true_ps)){
mu_ipw.true = mean(r/true_ps*y)
mu_ipw.true.iid = as.vector(r/true_ps*y)
se_ipw.true = sqrt(var(mu_ipw.true.iid)/n)
}
################################################################################
result = list(mu_ipw = mu_ipw,
mu_ipw.true = mu_ipw.true,
se_ipw = se_ipw,
se_ipw.true = se_ipw.true,
ps.matrix = ps.matrix,
nu.hat = nu.hat,
w.hat = w.hat,
imbalance = sum(apply(ensemble_fit$g, 1, mean)^2)
)
return(result)
}
EBMR_IPW_with_locally_misspecified_model = function(ps.matrix, perturb_ps, exp_tilt, exp_tilt_x_names){
# Basic setup
r = as.matrix(private$r)
y = as.matrix(private$y)
n = private$n
################################################################################
# Perturb the designated propensity score model with the exponential tilt model
################################################################################
J = ncol(ps.matrix)
ps.matrix[, perturb_ps] = exp_tilt(y[r == 1], data[r == 1, exp_tilt_x_names])*ps.matrix[, perturb_ps]
################################################################################
################################################################################
# Ensemble step
################################################################################
ensemble_fit = private$estimate_nu(ps.matrix, self$data[h_x_names], init = rep(1/J, J))
nu.hat = ensemble_fit$coefficients
w.hat = nu.hat^2/sum(nu.hat^2)
ensemble_ps = ps.matrix%*%w.hat
################################################################################
################################################################################
# Compute necessary quantities to estimate the influence function:
# \psi(\bm{\alpha}_*, \bm{\nu}_*)
###############################################################################
dot_W = function(nu){
(diag(2*nu)*sum(nu^2)-2*(nu)%*%t(nu^2))/(sum(nu^2)^2)
}
dot_W_nu_hat = 0; if(length(nu.hat) > 1) dot_W_nu_hat = dot_W(nu.hat)
w.H_nu = apply(ps.matrix%*%t(dot_W_nu_hat)*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
K_nu = ensemble_fit$K
g = t(ensemble_fit$g.matrix)
################################################################################
################################################################################
# IPW estimator for the population mean mu_0 with propensity score being estimated
# by the methods of Wang, Shao and Kim (2014).
################################################################################
mu_ipw = mean(r/ensemble_ps*y)
mu_ipw.iid = as.vector(t(r/ensemble_ps*y)+t(w.H_nu)%*%K_nu%*%g)
se_ipw = sqrt(var(mu_ipw.iid)/n)
################################################################################
result = list(mu_ipw = mu_ipw,
se_ipw = se_ipw,
ps.matrix = ps.matrix,
nu.hat = nu.hat,
w.hat = w.hat,
imbalance = sum(apply(ensemble_fit$g, 1, mean)^2)
)
return(result)
}
# estimate_nu = function(ps.matrix, h_x, init = NULL){
#   result = separate_variable_types(h_x)
#   h_x1 = result$x1
#   h_x2 = result$x2
#
#   J = ncol(ps.matrix)
#
#   d = NULL
#   if(ncol(h_x1) > 0){
#     for(j in 1:ncol(h_x1)) h_x1[, j] = as.factor(h_x1[, j])
#     d = model.matrix(lm(rep(1, n)~., data =  h_x1))
#   }
#
#   discrete_dim = ncol(d)
#   continuous_dim = ncol(h_x2)
#   h_dim = discrete_dim + continuous_dim
#
#   r = as.matrix(r)
#   h_x1 = as.matrix(h_x1)
#   h_x2 = as.matrix(h_x2)
#
#   g = function(nu){
#     g.matrix = matrix(NA, n, h_dim)
#     rw = r/(ps.matrix%*%nu)
#     if(discrete_dim > 0){
#       for(l in 1:discrete_dim){g.matrix[, l] = d[, l]*(rw-1)}
#     }
#     if(continuous_dim > 0){
#       for(l in (discrete_dim+1):(discrete_dim+continuous_dim)) g.matrix[, l] = h_x2[, l-discrete_dim]*(rw-1)
#     }
#     return(g.matrix)
#   }
#
#   G = function(g.matrix){
#     return(matrix(apply(g.matrix, 2, mean), h_dim, 1))
#   }
#
#   W = function(g.matrix){
#     return(solve(t(g.matrix)%*%g.matrix/n))
#   }
#
#   Gamma = function(nu){
#     Gamma.arr = array(NA, dim = c(h_dim, n, J))
#     for(l in 1:h_dim){
#       Gamma.arr[l,,] = jacobian(function(nu) g(nu)[, l], nu)
#     }
#     return(apply(Gamma.arr, c(1, 3), mean))
#   }
#
#   obj = function(nu){
#     g.matrix = g(nu)
#     G.hat = G(g.matrix)
#     value = t(G.hat)%*%G.hat
#     return(ifelse(is.infinite(value) || is.na(value), 10^8, value))
#   }
#
#   if(is.null(init)) init = rep(0, J)
#   nu_sol_path = matrix(init, J)
#   conv_err = 10^8
#   t = 1
#
#   while (conv_err > 10^(-8) & t < 1000){
#     opt = optim(nu_sol_path[, t], obj, method = "L-BFGS-B",
#                 lower = rep(-Inf, ncol(ps.matrix)), upper = rep(Inf, ncol(ps.matrix)))
#     nu_sol_path = cbind(nu_sol_path, opt$par)
#     g.matrix = g(nu_sol_path[,t+1]); W.hat = W(g.matrix);
#     obj = function(nu){
#       g.matrix = g(nu)
#       G.hat = G(g.matrix)
#       value = t(G.hat)%*%W.hat%*%G.hat
#       return(ifelse(is.infinite(value) || is.na(value), 10^8, value))
#     }
#     conv_err = max(abs(nu_sol_path[,t+1]-nu_sol_path[,t]))
#     t = t + 1
#   }
#
#   nu.hat = nu_sol_path[, t]
#   Gamma.hat = Gamma(nu.hat)
#   g.matrix = g(nu.hat)
#   W.hat = W(g.matrix)
#   S = var(g.matrix)
#   # cov.hat = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)/N
#   cov.hat = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)%*%t(Gamma.hat)%*%W.hat%*%S%*%W.hat%*%Gamma.hat%*%solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)/n
#   se = sqrt(diag(cov.hat))
#
#   results = list(coefficients = nu.hat,
#                  sol.path = nu_sol_path,
#                  cov.hat = cov.hat,
#                  se = se,
#                  lower = nu.hat-qnorm(0.975)*se,
#                  upper = nu.hat+qnorm(0.975)*se,
#                  g.matrix = g.matrix,
#                  K = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)%*%t(Gamma.hat)%*%W.hat,
#                  h_x = cbind(d, h_x2))
#
#   return(results)
# }
# EBMR_IPW = function(self$ps_fit.list, h_x, true_ps = NULL){
#   ################################################################################
#   # Collect the propensity score models
#   ################################################################################
#   J = length(self$ps_fit.list)
#   ps_model.list = lapply(self$ps_fit.list, function(ps_fit) ps_fit$model)
#   alpha.list = lapply(self$ps_fit.list, function(ps_fit) ps_fit$coefficients)
#   alpha_dim = unlist(lapply(alpha.list, length))
#   ps.matrix = do.call(cbind, lapply(self$ps_fit.list, function(ps_fit) ps_fit$fitted.values))
#   ################################################################################
#
#   ################################################################################
#   # Ensemble step
#   ################################################################################
#   ensemble_fit = estimate_nu(ps.matrix, h_x, init = rep(1/J, J))
#   nu.hat = ensemble_fit$coefficients
#   w.hat = nu.hat^2/sum(nu.hat^2)
#   ensemble_ps = ps.matrix%*%w.hat
#   ################################################################################
#
#   ################################################################################
#   # Compute necessary quantities to estimate the influence function:
#   # \psi(\bm{\alpha}_*, \bm{\nu}_*)
#   ################################################################################
#   dot_pi = matrix(NA, n, sum(alpha_dim))
#   for(j in 1:J){
#     x = as.matrix(data[self$ps_fit.list[[j]]$model_x_names])
#     dot_pi[, (sum(alpha_dim[0:(j-1)])+1):sum(alpha_dim[1:j])] = jacobian(function(alpha) ps_model.list[[j]](x, y, alpha), alpha.list[[j]])
#   }
#   E_dot_g = -(t(dot_pi)*rep(w.hat, alpha_dim))%*%(ensemble_fit$h_x*as.vector(r*((ensemble_ps)^(-2))))/n
#
#   dot_W = function(w){
#     (diag(2*w)*sum(w^2)-2*(w)%*%t(w^2))/(sum(w^2)^2)
#   }
#   dot_W_nu_hat = 0; if(length(nu.hat) > 1) dot_W_nu_hat = dot_W(nu.hat)
#
#   H_alpha.w = apply(t((t(dot_pi)*rep(w.hat, alpha_dim)))*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
#   w.H_nu = apply(ps.matrix%*%t(dot_W_nu_hat)*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
#
#   K_alpha = c(lapply(self$ps_fit.list, function(ps_fit) ps_fit$K)) %>% bdiag()
#   g_all = do.call(rbind, lapply(self$ps_fit.list, function(ps_fit) t(ps_fit$g.matrix)))
#   K_nu = ensemble_fit$K
#   g = t(ensemble_fit$g.matrix)
#   ################################################################################
#
#   ################################################################################
#   # IPW estimator for the population mean mu_0 with propensity score being estimated
#   # by the methods of Wang, Shao and Kim (2014).
#   ################################################################################
#   mu_ipw = mean(r/ensemble_ps*y)
#   mu_ipw.iid = as.vector(t(r/ensemble_ps*y)
#                          +(t(H_alpha.w)+t(w.H_nu)%*%K_nu%*%t(E_dot_g))%*%K_alpha%*%g_all
#                          +t(w.H_nu)%*%K_nu%*%g)
#   se_ipw = sqrt(var(mu_ipw.iid)/n)
#   ################################################################################
#
#   ################################################################################
#   # IPW estimator for the population mean mu_0 with known propensity score.
#   ################################################################################
#   mu_ipw.true = NA
#   if(!is.null(true_ps)){
#     mu_ipw.true = mean(r/true_ps*y)
#     mu_ipw.true.iid = as.vector(r/true_ps*y)
#     se_ipw.true = sqrt(var(mu_ipw.true.iid)/N)
#   }
#   ################################################################################
#
#   results = list(mu_ipw = mu_ipw,
#                  mu_ipw.true = mu_ipw.true,
#                  se_ipw = se_ipw,
#                  se_ipw.true = se_ipw.true,
#                  ps.matrix = ps.matrix,
#                  nu.hat = ensemble_fit$nu.hat,
#                  w.hat = w.hat,
#                  imbalance = sum(apply(ensemble_fit$g, 1, mean)^2)
#   )
#
#   return(results)
# }
# EBMR_IPW_with_locally_misspecified_model = function(ps.matrix, perturb_ps, exp_tilt, exp_tilt_x_names, h){
#   ################################################################################
#   # Collect the propensity score models
#   ################################################################################
#   J = ncol(ps.matrix)
#   ps.matrix[, perturb_ps] = exp_tilt(y[r == 1], data[r == 1, exp_tilt_x_names])*ps.matrix[, perturb_ps]
#   imputed.ps.matrix = matrix(1, N, J)
#   imputed.ps.matrix[r == 1, ] = ps.matrix
#   ################################################################################
#
#   ################################################################################
#   # Compress the propensity score models
#   ################################################################################
#   ensemble_fit = estimate_nu(h, ps.matrix, r, ortho = FALSE, init = rep(1/J, J))
#   nu = ensemble_fit$nu.hat
#   nu = as.matrix((nu^2)/as.numeric(t(nu)%*%nu))
#   compressed.pi = rep(1, N)
#   compressed.pi[r == 1] = ps.matrix%*%nu
#   ################################################################################
#
#   ################################################################################
#   # calculate dot_W_nu_hat, nu.iid ... (for estimating the ASE)
#   ################################################################################
#   dot_W = function(w){
#     (diag(2*w)*sum(w^2)-2*(w^2)%*%t(w))/(sum(w^2)^2)
#   }
#   dot_W_nu_hat = 0; if(length(nu) > 1) dot_W_nu_hat = dot_W(ensemble_fit$nu.hat)
#
#   nu.iid = -ensemble_fit$K_nu%*%ensemble_fit$g
#   ################################################################################
#
#   ################################################################################
#   # IPW estimator for the population mean mu
#   ################################################################################
#   mu_ipw = mean(r/compressed.pi*y)
#   ################################################################################
#
#   ################################################################################
#   # Estimate the asymptotic variance of IPW
#   ################################################################################
#   ipw.beta = apply(-r*y/(compressed.pi^2)*(imputed.ps.matrix%*%dot_W_nu_hat), 2, mean)
#
#   mu_ipw.iid = as.vector(r/compressed.pi*y+ipw.beta%*%nu.iid)
#   se_ipw = sqrt(var(mu_ipw.iid)/N)
#
#   mu_ipw.true.iid = as.vector(r/compressed.pi*y)
#   se_ipw.true = sqrt(var(mu_ipw.true.iid)/N)
#   ################################################################################
#
#   return(list(mu_ipw = mu_ipw,
#               se_ipw = se_ipw,
#               ps.matrix = ps.matrix,
#               nu = ensemble_fit$nu.hat,
#               nu = nu))
# }
possibly_true_ps = c(3, 3)
xi.vector = seq(0, n^(-0.5), length.out = 30)
# res = matrix(NA, length(xi.vector), 2)
# m = 1
for(xi in xi.v){
all_estimates = matrix(NA, length(health), 2)
for(k in 1:length(health)){
subdat = dat[dat$health == health[k], ]
subdat = dat[dat$health == health[k], ]
full_ps_specifications = full_ps_specifications.list[[k]]
ps_specifications <- list(
formula.list = full_ps_specifications$formula.list[model_set],
h_x_names.list = full_ps_specifications$h_x_names.list[model_set],
inv_link = full_ps_specifications$inv_link
)
ebmr = EBMRAlgorithm$new(y_names = "teacher_report",
ps_specifications = ps_specifications,
data = subdat)
result = ebmr$EBMR_IPW(h_x_names = c("father", "parent_report"))
exp.tilt = function(y, x) exp(xi*as.matrix(cbind(y))%*%rep(1, ncol(cbind(y))))
exp.tilt.x.names = NULL
sa_result = EBMR_IPW_with_locally_misspecified_mode(
ps.matrix = result$ps.matrix,
perturb_ps = possibly_true_ps[k],
exp.tilt = exp.tilt,
exp.tilt.x.names = exp.tilt.x.names
)
save_file = paste0(c("MHD_results/EBMR_IPW_", subset_names[k], "_", 1:3, "_mild", round(xi, 3), "_OR.RDS"), collapse = "")
saveRDS(sa_result, save_file)
# print(sa_result$w.hat)
# all_estimates[k, ] = unlist(sa_result[1:2])
}
# effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
# Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
# se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
# all_results[m, ] = c(effect, se)
# m = m + 1
}
possibly_true_ps = c(3, 3)
xi.vector = seq(0, n^(-0.5), length.out = 30)
# res = matrix(NA, length(xi.vector), 2)
# m = 1
for(xi in xi.v){
all_estimates = matrix(NA, length(health), 2)
for(k in 1:length(health)){
subdat = dat[dat$health == health[k], ]
subdat = dat[dat$health == health[k], ]
full_ps_specifications = full_ps_specifications.list[[k]]
ps_specifications <- list(
formula.list = full_ps_specifications$formula.list[model_set],
h_x_names.list = full_ps_specifications$h_x_names.list[model_set],
inv_link = full_ps_specifications$inv_link
)
ebmr = EBMRAlgorithm$new(y_names = "teacher_report",
ps_specifications = ps_specifications,
data = subdat)
result = ebmr$EBMR_IPW(h_x_names = c("father", "parent_report"))
exp.tilt = function(y, x) exp(xi*as.matrix(cbind(y))%*%rep(1, ncol(cbind(y))))
exp.tilt.x.names = NULL
sa_result = EBMR_IPW_with_locally_misspecified_model(
ps.matrix = result$ps.matrix,
perturb_ps = possibly_true_ps[k],
exp.tilt = exp.tilt,
exp.tilt.x.names = exp.tilt.x.names
)
save_file = paste0(c("MHD_results/EBMR_IPW_", subset_names[k], "_", 1:3, "_mild", round(xi, 3), "_OR.RDS"), collapse = "")
saveRDS(sa_result, save_file)
# print(sa_result$w.hat)
# all_estimates[k, ] = unlist(sa_result[1:2])
}
# effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
# Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
# se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
# all_results[m, ] = c(effect, se)
# m = m + 1
}
exp.tilt = function(y, x) exp(xi*as.matrix(cbind(y))%*%rep(1, ncol(cbind(y))))
exp_tilt_x_names = NULL
possibly_true_ps.vector = c(3, 3)
xi.vector = seq(0, n^(-0.5), length.out = 30)
# res = matrix(NA, length(xi.vector), 2)
# m = 1
for(xi in xi.v){
all_estimates = matrix(NA, length(health), 2)
for(k in 1:length(health)){
subdat = dat[dat$health == health[k], ]
subdat = dat[dat$health == health[k], ]
full_ps_specifications = full_ps_specifications.list[[k]]
ps_specifications <- list(
formula.list = full_ps_specifications$formula.list[model_set],
h_x_names.list = full_ps_specifications$h_x_names.list[model_set],
inv_link = full_ps_specifications$inv_link
)
ebmr = EBMRAlgorithm$new(y_names = "teacher_report",
ps_specifications = ps_specifications,
data = subdat)
result = ebmr$EBMR_IPW(h_x_names = c("father", "parent_report"))
sa_result = EBMR_IPW_with_locally_misspecified_model(
ps.matrix = result$ps.matrix,
perturb_ps = possibly_true_ps.vector[k],
exp.tilt = exp.tilt,
exp_tilt_x_names = exp_tilt_x_names
)
save_file = paste0(c("MHD_results/EBMR_IPW_", subset_names[k], "_", 1:3, "_mild", round(xi, 3), "_OR.RDS"), collapse = "")
# saveRDS(sa_result, save_file)
# print(sa_result$w.hat)
# all_estimates[k, ] = unlist(sa_result[1:2])
}
# effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
# Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
# se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
# all_results[m, ] = c(effect, se)
# m = m + 1
}
possibly_true_ps.vector = c(3, 3)
xi.vector = seq(0, n^(-0.5), length.out = 30)
# res = matrix(NA, length(xi.vector), 2)
# m = 1
for(xi in xi.v){
all_estimates = matrix(NA, length(health), 2)
for(k in 1:length(health)){
subdat = dat[dat$health == health[k], ]
subdat = dat[dat$health == health[k], ]
full_ps_specifications = full_ps_specifications.list[[k]]
ps_specifications <- list(
formula.list = full_ps_specifications$formula.list[model_set],
h_x_names.list = full_ps_specifications$h_x_names.list[model_set],
inv_link = full_ps_specifications$inv_link
)
ebmr = EBMRAlgorithm$new(y_names = "teacher_report",
ps_specifications = ps_specifications,
data = subdat)
result = ebmr$EBMR_IPW(h_x_names = c("father", "parent_report"))
sa_result = EBMR_IPW_with_locally_misspecified_model(
ps.matrix = result$ps.matrix,
perturb_ps = possibly_true_ps.vector[k],
exp_tilt = exp_tilt,
exp_tilt_x_names = exp_tilt_x_names
)
save_file = paste0(c("MHD_results/EBMR_IPW_", subset_names[k], "_", 1:3, "_mild", round(xi, 3), "_OR.RDS"), collapse = "")
# saveRDS(sa_result, save_file)
# print(sa_result$w.hat)
# all_estimates[k, ] = unlist(sa_result[1:2])
}
# effect = odds_ratio(all_estimates[1, 1], all_estimates[2, 1])
# Sigma = matrix(c(all_estimates[1, 2]^2, 0, 0, all_estimates[2, 2]^2), 2,2)
# se = sqrt(delta_method(all_estimates[1, 1], all_estimates[2, 1])%*%Sigma%*%delta_method(all_estimates[1, 1], all_estimates[2, 1]))
# all_results[m, ] = c(effect, se)
# m = m + 1
}
roxygen2::roxygenize()
devtools::install_github("LukeChuang890212/EBMR_Methods_Reproducibility_Materials/EBMRalgorithm")
roxygen2::roxygenise()
getwd()
