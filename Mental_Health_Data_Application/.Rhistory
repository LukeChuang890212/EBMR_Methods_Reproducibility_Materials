cc1 = dat$health == 1 & dat$r == 1
cc0 = dat$health == 0 & dat$r == 1
mu_cc1 = mean(dat[cc1, ]$teacher_report)
se_cc1 = sd(dat[cc1, ]$teacher_report)/sqrt(sum(cc1))
mu_cc0 = mean(dat[cc0, ]$teacher_report)
se_cc0 = sd(dat[cc0, ]$teacher_report)/sqrt(sum(cc0))
Sigma = matrix(c(se_cc0^2, 0, 0, se_cc1^2), 2,2)
all_results[20, ] = c(odds_ratio(mu_cc0, mu_cc1),
sqrt(delta_method(mu_cc0, mu_cc1)%*%Sigma%*%delta_method(mu_cc0, mu_cc1)))
all_results
# res.tmp = res
boot_se_ipw = boot_CI =  boot_se_ipw.mean = boot_se_ipw.CI = rep(NA, 20)
k = 1
par(mfrow = c(4, 5))
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
print(c(model_num, i))
model_set0 = model_combinations[, i]
boot_result0 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[1], "_", model_set0, "_OR4.RDS"), collapse = ""))
all_boot_results = matrix(NA, length(health)*2, ncol(boot_result0))
all_boot_results[1, ] = boot_result0[1, ]
all_boot_results[3, ] = boot_result0[2, ]
for(j in 1:ncol(model_combinations)){
model_set1 = model_combinations[, j]
boot_result1 = readRDS(paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[2], "_", model_set1, "_OR4.RDS"), collapse = ""))
all_boot_results[2, ] = boot_result1[1, ]
all_boot_results[4, ] = boot_result1[2, ]
boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_CI[k] = paste0(c("[", paste(round(quantile(boot.effect, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
# boot_se_ipw[k] = sd(rm.extreme(boot.effect[!is.na(boot.effect)]))
boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v[!is.na(v)])))
boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v[!is.na(v)])))
# # boot_mu_ipw = apply(all_boot_results[1:2, ], 1, mean)
# # boot_var_ipw = apply(all_boot_results[1:2, ], 1, mean)
boot_se_ipw[k] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
# boot.se = sqrt(apply(boot_result, 2, function(v) delta_method(v[1], v[2])^2%*%c(v[3]^2, v[4]^2)))
# boot_se_ipw.mean[m] = round(mean(boot.se), 4)
# boot_se_ipw.CI[m] = paste0(c("[", paste(round(quantile(boot.se, c(0.025, 0.975)), 4), collapse = ", "),
#                              "]"), collapse =  "")
k = k + 1
}
}
}
all_boot_results[1,] = boot_result0[3, ]
all_boot_results[2,] = boot_result1[3, ]
# boot.effect = apply(all_boot_results[1:2, ], 2, function(v) odds_ratio(v[1], v[2]))
# boot_se_ipw[20] = sd(rm.extreme(boot.effect))
boot_mu_ipw = apply(all_boot_results[1:2, ], 1, function(v) mean(rm.extreme(v)))
boot_var_ipw = apply(all_boot_results[1:2, ], 1, function(v) var(rm.extreme(v)))
boot_se_ipw[20] = sqrt(delta_method(boot_mu_ipw[1], boot_mu_ipw[2])^2%*%boot_var_ipw)
all_results = cbind(all_results, boot_se_ipw)
all_results = as.data.frame(all_results)
all_results = cbind(round(all_results, 3),
apply(cbind(all_results[, 1] - qnorm(0.975)*all_results[, 2],
all_results[, 1] + qnorm(0.975)*all_results[, 2]), 1,
function(v) paste0("[", round(v[1], 3) , ", ", round(v[2], 3), "]")))
rownames(all_results) = c("$\\hat{\\theta}_{100}^{100}$", "$\\hat{\\theta}_{100}^{010}$", "$\\hat{\\theta}_{100}^{001}$",
"$\\hat{\\theta}_{010}^{100}$", "$\\hat{\\theta}_{010}^{010}$", "$\\hat{\\theta}_{010}^{001}$",
"$\\hat{\\theta}_{001}^{100}$", "$\\hat{\\theta}_{001}^{010}$", "$\\hat{\\theta}_{001}^{001}$",
"$\\hat{\\theta}_{110}^{110}$", "$\\hat{\\theta}_{110}^{101}$", "$\\hat{\\theta}_{110}^{011}$",
"$\\hat{\\theta}_{101}^{110}$", "$\\hat{\\theta}_{101}^{101}$", "$\\hat{\\theta}_{101}^{011}$",
"$\\hat{\\theta}_{011}^{110}$", "$\\hat{\\theta}_{011}^{101}$", "$\\hat{\\theta}_{011}^{011}$",
"$\\hat{\\theta}_{111}^{111}$", "$\\hat{\\theta}_\\text{CC}$")
colnames(all_results) = c("PE", "SE", "Bootstrap SE", "$95\\%$ CI")
kable(all_results, align = "c", booktabs = TRUE, escape = FALSE, linesep = "",
caption = "") %>%
kable_styling(full_width = F, latex_options = c("hold_position")) %>%
row_spec(9, hline_after = T) %>%
row_spec(18, hline_after = T) %>%
row_spec(19, hline_after = T)
9/487
library(EBMRalgorithm)
options(knitr.kable.NA = '')
knitr::opts_chunk$set(echo = FALSE, fig.height = 10, fig.width = 16, fig.align = "center")
devtools::install_github("LukeChuang890212/EBMR_Methods_Reproducibility_Materials/EBMRalgorithm")
library(EBMRalgorithm)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(ggpubr)
original_data = read.csv("data_application.csv")
percent = original_data$Percentage
n = 2486
class_n = round(n*percent/100)
dat = matrix(NA, n, 5)
for(i in 1:nrow(original_data)){
dat[((sum(class_n[0:(i-1)]))+1):sum(class_n[1:i]),] = matrix(rep(unlist(original_data[i,]), each = class_n[i]), class_n[i], 5)
}
dat = as.data.frame(dat[, -5])
dat[dat == "Yes"] = 1
dat[dat == "No"] = 0
dat[dat == "Abnormal"] = 1
dat[dat == "Normal"] = 0
dat[dat == "Missing"] = NA
colnames(dat) = c("father", "health", "teacher_report", "parent_report")
dat$r = ifelse(is.na(dat$teacher_report), 0, 1)
dat$father = as.numeric(dat$father)
dat$health = as.numeric(dat$health)
dat$teacher_report = as.numeric(dat$teacher_report)
dat$parent_report = as.numeric(dat$parent_report)
dat$fp = dat$father*dat$parent_report
dat$teacher_report[dat$r == 0] = -1
n = nrow(dat)
missing_rate = 1-mean(dat$r)
mu_cc = mean(dat$teacher_report[dat$r == 1])
se_cc = sd(dat$teacher_report[dat$r == 1])/sqrt(sum(r))
bootstrap = function(ps_specifications, data, B){
library(foreach)
library(doParallel)
library(doSNOW)
library(EBMRalgorithm)
n = nrow(data)
cores = detectCores()
cl = makeCluster(cores - 2) ## number of clusters
registerDoSNOW(cl)
pb = txtProgressBar(max = B, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
parallel_packages = c("EBMRalgorithm")
boot_result = foreach(i= 1:B, .combine = 'cbind', .options.snow = opts, .packages = parallel_packages) %dopar% {
result = tryCatch({
indices = sample(1:n, replace = TRUE)
boot_dat = data[indices,]
ebmr = EBMRAlgorithm$new(y_names = "teacher_report",
ps_specifications = ps_specifications,
data = data, is.perturb = T)
result = ebmr$EBMR_IPW_perturb(h_x_names = c("father", "parent_report"))
estimates = unlist(result[c(1, 3)])
c(mu_ipw = estimates[1], se_ipw = estimates[2], mu_cc = mean(boot_dat$teacher_report[boot_dat$r == 1]))
}, error = function(e){
c(mu_ipw = NA, se_ipw = NA, mu_cc = mean(boot_dat$teacher_report[boot_dat$r == 1]))
})
}
return(boot_result)
}
rm.extreme = function(v){
z.score = scale(v)
extreme_num = sum(abs(z.score) > 3)
print(paste(extreme_num, length(v)))
if(extreme_num == 0){
return(v)
}else{
return(v[-order(abs(z.score), decreasing = TRUE)[1:min(extreme_num, extreme_num)]])
}
}
WangShaoKim2014 = function(formula, h_x_names, inv_link, data, init = NULL) {
# Basic setup
result = parse_formula(formula)
r = as.matrix(data[result$r_names])
y = as.matrix(data[result$y_names])
x = as.matrix(data[result$x_names])
n = nrow(data)
model_x_names = colnames(x)
# result = separate_variable_types(x)
# model_x1 = result$x1
# model_x2 = result$x2
# model_x1_names = result$x1_names
# model_x2_names = result$x2_names
result = separate_variable_types(data[h_x_names])
h_x1 = result$x1
h_x2 = result$x2
# h_x1 = h[[1]]; h_x2 = h[[2]];
# if(!is.null(x1)) x1 = as.matrix(x1)
# if(!is.null(x2)) x2 = as.matrix(x2)
#
# model_x1 = NULL; model_x2 = NULL;
# if(!is.null(model_x1_names)) model_x1 = as.matrix(dat[model_x1_names])
# if(!is.null(model_x2_names)) model_x2 = as.matrix(dat[model_x2_names])
is.mnar = ifelse(ncol(y) == 0, FALSE, TRUE)
alpha_dim = 1 + as.numeric(is.mnar) + ncol(x)
d = NULL
if(ncol(h_x1) > 0){
for(j in 1:ncol(h_x1)) h_x1[, j] = as.factor(h_x1[, j])
d = model.matrix(lm(rep(1, n)~., data =  h_x1))
}
discrete_dim = ncol(d)
continuous_dim = ncol(h_x2)
h_dim = discrete_dim + continuous_dim
# r = as.matrix(r)
# y = as.matrix(y)
# x = as.matrix(x)
if(continuous_dim == 0){
h_x2 = NULL
}else{
h_x2 = as.matrix(h_x2)
}
# h_x1 = as.matrix(h_x1)
# h_x2 = as.matrix(h_x2)
model = function(x, y, alpha){
if(!is.mnar) y = NULL
inv_link(cbind(rep(1, n), y, x)%*%alpha)
}
w = function(x, y, alpha) 1/model(x, y, alpha)
g = function(alpha){
g.matrix = matrix(NA, n, h_dim)
rw = r*w(x, y, alpha)
if(discrete_dim > 0){
for(l in 1:discrete_dim){g.matrix[, l] = d[, l]*(rw-1)}
}
if(continuous_dim > 0){
for(l in (discrete_dim+1):(discrete_dim+continuous_dim)) g.matrix[, l] = h_x2[, l-discrete_dim]*(rw-1)
}
return(g.matrix)
}
G = function(g.matrix){
return(matrix(apply(g.matrix, 2, mean), h_dim, 1))
}
W = function(g.matrix){
return(solve(t(g.matrix)%*%g.matrix/n))
}
Gamma = function(alpha){
Gamma.arr = array(NA, dim = c(h_dim, n, alpha_dim))
for(l in 1:h_dim){
Gamma.arr[l,,] = jacobian(function(alpha) g(alpha)[, l], alpha)
}
return(apply(Gamma.arr, c(1, 3), mean))
}
obj = function(alpha){
g.matrix = g(alpha)
G.hat = G(g.matrix)
value = t(G.hat)%*%G.hat
return(ifelse(is.infinite(value) || is.na(value), 10^8, value))
}
if(is.null(init)) init = rep(0, alpha_dim)
alpha_sol_path = matrix(init, alpha_dim)
conv_err = 10^8
t = 1
while (conv_err > 10^(-8) & t < 1000){
opt = optim(alpha_sol_path[,t], obj, method = "L-BFGS-B")
alpha_sol_path = cbind(alpha_sol_path, opt$par)
g.matrix = g(alpha_sol_path[,t+1]); W.hat = W(g.matrix);
obj = function(alpha){
g.matrix = g(alpha); G.hat = G(g.matrix);
value = t(G.hat)%*%W.hat%*%G.hat
return(ifelse(is.infinite(value) || is.na(value), 10^8, value))
}
conv_err = max(abs(alpha_sol_path[,t+1]-alpha_sol_path[,t]))
t = t + 1
}
alpha.hat = alpha_sol_path[, t]
fitted_values = model(x, y, alpha.hat)
Gamma.hat = Gamma(alpha.hat)
g.matrix = g(alpha.hat)
W.hat = W(g.matrix)
S = var(g.matrix)
# cov.hat = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)/N
cov.hat = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)%*%t(Gamma.hat)%*%W.hat%*%S%*%W.hat%*%Gamma.hat%*%solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)/n
se = sqrt(diag(cov.hat))
results = list(coefficients = alpha.hat,
fitted.values = fitted_values,
sol.path = alpha_sol_path,
cov.hat = cov.hat,
se = se,
lower = alpha.hat-qnorm(0.975)*se,
upper = alpha.hat+qnorm(0.975)*se,
g.matrix = g.matrix,
K = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)%*%t(Gamma.hat)%*%W.hat,
model = model,
model_x_names = model_x_names,
h_x = cbind(d, h_x2))
return(results)
}
estimate_nu = function(ps.matrix, h_x, data, init = NULL) {
# Basic setup
r = as.matrix(data$r)
n = nrow(data)
J = ncol(ps.matrix)
result = separate_variable_types(h_x)
h_x1 = result$x1
h_x2 = result$x2
d = NULL
if(ncol(h_x1) > 0){
for(j in 1:ncol(h_x1)) h_x1[, j] = as.factor(h_x1[, j])
d = model.matrix(lm(rep(1, n)~., data =  h_x1))
}
discrete_dim = ncol(d)
continuous_dim = ncol(h_x2)
h_dim = discrete_dim + continuous_dim
# r = as.matrix(r)
if(continuous_dim == 0){
h_x2 = NULL
}else{
h_x2 = as.matrix(h_x2)
}
# h_x1 = as.matrix(h_x1)
# h_x2 = as.matrix(h_x2)
g = function(nu){
g.matrix = matrix(NA, n, h_dim)
rw = r/(ps.matrix%*%nu)
if(discrete_dim > 0){
for(l in 1:discrete_dim){g.matrix[, l] = d[, l]*(rw-1)}
}
if(continuous_dim > 0){
for(l in (discrete_dim+1):(discrete_dim+continuous_dim)) g.matrix[, l] = h_x2[, l-discrete_dim]*(rw-1)
}
return(g.matrix)
}
G = function(g.matrix){
return(matrix(apply(g.matrix, 2, mean), h_dim, 1))
}
W = function(g.matrix){
return(solve(t(g.matrix)%*%g.matrix/n))
}
Gamma = function(nu){
Gamma.arr = array(NA, dim = c(h_dim, n, J))
for(l in 1:h_dim){
Gamma.arr[l,,] = jacobian(function(nu) g(nu)[, l], nu)
}
return(apply(Gamma.arr, c(1, 3), mean))
}
Gamma = function(nu){
-t(as.vector(r/(ps.matrix%*%nu)^2)*cbind(d, h_x2))%*%ps.matrix/n
}
obj = function(nu){
g.matrix = g(nu)
G.hat = G(g.matrix)
value = t(G.hat)%*%G.hat
return(ifelse(is.infinite(value) || is.na(value), 10^8, value))
}
if(is.null(init)) init = rep(0, J)
nu_sol_path = matrix(init, J)
conv_err = 10^8
t = 1
while (conv_err > 10^(-8) & t < 1000){
opt = optim(nu_sol_path[, t], obj, method = "L-BFGS-B",
lower = rep(-Inf, ncol(ps.matrix)), upper = rep(Inf, ncol(ps.matrix)))
nu_sol_path = cbind(nu_sol_path, opt$par)
g.matrix = g(nu_sol_path[,t+1]); W.hat = W(g.matrix);
obj = function(nu){
g.matrix = g(nu)
G.hat = G(g.matrix)
value = t(G.hat)%*%W.hat%*%G.hat
return(ifelse(is.infinite(value) || is.na(value), 10^8, value))
}
conv_err = max(abs(nu_sol_path[,t+1]-nu_sol_path[,t]))
t = t + 1
}
nu.hat = nu_sol_path[, t]
Gamma.hat = Gamma(nu.hat)
g.matrix = g(nu.hat)
W.hat = W(g.matrix)
S = var(g.matrix)
# cov.hat = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)/N
cov.hat = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)%*%t(Gamma.hat)%*%W.hat%*%S%*%W.hat%*%Gamma.hat%*%solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)/n
se = sqrt(diag(cov.hat))
results = list(coefficients = nu.hat,
sol.path = nu_sol_path,
cov.hat = cov.hat,
se = se,
lower = nu.hat-qnorm(0.975)*se,
upper = nu.hat+qnorm(0.975)*se,
g.matrix = g.matrix,
Gamma = Gamma.hat,
W = W.hat,
K = solve(t(Gamma.hat)%*%W.hat%*%Gamma.hat)%*%t(Gamma.hat)%*%W.hat,
h_x = cbind(d, h_x2))
return(results)
}
EBMR_IPW = function(h_x_names, data, true_ps = NULL) {
# Basic setup
r = as.matrix(data$r)
y = as.matrix(data$y)
n = nrow(data)
################################################################################
# Collect the propensity score models
################################################################################
J = length(ps_fit.list)
ps_model.list = lapply(ps_fit.list, function(ps_fit) ps_fit$model)
alpha.list = lapply(ps_fit.list, function(ps_fit) ps_fit$coefficients)
alpha_dim = unlist(lapply(alpha.list, length))
ps.matrix = do.call(cbind, lapply(ps_fit.list, function(ps_fit) ps_fit$fitted.values))
################################################################################
################################################################################
# Ensemble step
################################################################################
ensemble_fit = estimate_nu(ps.matrix, data[h_x_names], data, init = rep(1/J, J))
nu.hat = ensemble_fit$coefficients
w.hat = nu.hat^2/sum(nu.hat^2)
ensemble_ps = ps.matrix%*%w.hat
################################################################################
################################################################################
# Compute necessary quantities to estimate the influence function:
# \psi(\bm{\alpha}_*, \bm{\nu}_*)
################################################################################
dot_pi = matrix(NA, n, sum(alpha_dim))
for(j in 1:J){
x = as.matrix(data[ps_fit.list[[j]]$model_x_names])
dot_pi[, (sum(alpha_dim[0:(j-1)])+1):sum(alpha_dim[1:j])] = jacobian(function(alpha) ps_model.list[[j]](x, y, alpha), alpha.list[[j]])
}
E_dot_g = -(t(dot_pi)*rep(w.hat, alpha_dim))%*%(ensemble_fit$h_x*as.vector(r*((ensemble_ps)^(-2))))/n
dot_W = function(nu){
(diag(2*nu)*sum(nu^2)-2*(nu)%*%t(nu^2))/(sum(nu^2)^2)
}
dot_W_nu_hat = 0; if(length(nu.hat) > 1) dot_W_nu_hat = dot_W(nu.hat)
H_alpha.w = apply(t((t(dot_pi)*rep(w.hat, alpha_dim)))*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
w.H_nu = apply(ps.matrix%*%t(dot_W_nu_hat)*as.vector(r*y*((ensemble_ps)^(-2))), 2, mean)
K_alpha = c(lapply(ps_fit.list, function(ps_fit) ps_fit$K)) %>% bdiag()
g_all = do.call(rbind, lapply(ps_fit.list, function(ps_fit) t(ps_fit$g.matrix)))
K_nu = ensemble_fit$K
g = t(ensemble_fit$g.matrix)
################################################################################
################################################################################
# IPW estimator for the population mean mu_0 with propensity score being estimated
# by the methods of Wang, Shao and Kim (2014).
################################################################################
mu_ipw = mean(r/ensemble_ps*y)
# mu_ipw.iid = as.vector(t(r/ensemble_ps*y)
#                        +(t(H_alpha.w)-t(w.H_nu)%*%K_nu%*%t(E_dot_g))%*%K_alpha%*%g_all
#                        +t(w.H_nu)%*%K_nu%*%g)
mu_ipw.iid = as.vector(t(r/ensemble_ps*y)
+(t(H_alpha.w)-2*t(w.H_nu)%*%K_nu%*%t(E_dot_g))%*%K_alpha%*%g_all
+t(w.H_nu)%*%K_nu%*%g)
se_ipw = sqrt(var(mu_ipw.iid)/n)
################################################################################
################################################################################
# IPW estimator for the population mean mu_0 with known propensity score.
################################################################################
mu_ipw.true = NA
se_ipw.true = NA
if(!is.null(true_ps)){
mu_ipw.true = mean(r/true_ps*y)
mu_ipw.true.iid = as.vector(r/true_ps*y)
se_ipw.true = sqrt(var(mu_ipw.true.iid)/n)
}
################################################################################
result = list(mu_ipw = mu_ipw,
mu_ipw.true = mu_ipw.true,
se_ipw = se_ipw,
se_ipw.true = se_ipw.true,
ps.matrix = ps.matrix,
nu.hat = nu.hat,
w.hat = w.hat,
imbalance = sum(apply(ensemble_fit$g, 1, mean)^2)
)
return(result)
}
#------------------------------------------------------------------------------#
# Basic Setup ----
#------------------------------------------------------------------------------#
full_ps_specifications_for_p0 = list(
formula.list = list(
r ~ o(teacher_report),
r ~ o(teacher_report) + father,
r ~ o(teacher_report) + parent_report
),
h_x_names.list = list(
c("father", "parent_report"),
c("father", "parent_report"),
c("father", "parent_report")
),
inv_link = function(eta) 1/(1+exp(eta))
)
full_ps_specifications_for_p1 = list(
formula.list = list(
r ~ o(teacher_report),
r ~ o(teacher_report) + father,
r ~ o(teacher_report) + parent_report
),
h_x_names.list = list(
c("father", "parent_report"),
c("father", "parent_report"),
c("father", "parent_report")
),
inv_link = function(eta) 1/(1+exp(eta))
)
full_ps_specifications.list = list(
full_ps_specifications_for_p0,
full_ps_specifications_for_p1
)
health = 0:1
subset_names = c("health0", "health1")
odds_ratio = function(x, y) (y/(1-y))/(x/(1-x))
delta_method = function(x, y) c(-(y/(1-y))/((x/(1-x))^2)*((1/x^2)/((1/x-1)^2)),
((1/y^2)/((1/y-1)^2))/(x/(1-x)))
boot = TRUE
B = 200
#------------------------------------------------------------------------------#
# Bootstrap ----
#------------------------------------------------------------------------------#
for(model_num in 1:3){
model_combinations = combn(3, model_num)
for(i in 1:ncol(model_combinations)){
model_set = model_combinations[, i]
for(k in 1:2) {
print(c(model_num, i, k))
subdat = dat[dat$health == health[k], ]
full_ps_specifications = full_ps_specifications.list[[k]]
ps_specifications <- list(
formula.list = full_ps_specifications$formula.list[model_set],
h_x_names.list = full_ps_specifications$h_x_names.list[model_set],
inv_link = full_ps_specifications$inv_link
)
boot_result = bootstrap(ps_specifications, subdat, B)
save.file = paste0(c("MHD_results/EBMR_IPW_bootstrap_", subset_names[k], "_", model_set, "_OR4.RDS"), collapse = "")
# if(file.exists(save.file)){
#   boot_result = cbind(readRDS(save.file), boot_result)
#   saveRDS(boot_result, save.file)
# }else{
#   saveRDS(boot_result, save.file)
# }
saveRDS(boot_result, save.file)
print("")
print(apply(boot_result, 1, mean))
print(apply(boot_result, 1, sd))
gc()
}
}
}
################################################################################
roxygen2::roxygenize()
